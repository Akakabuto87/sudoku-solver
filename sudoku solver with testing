import numpy as np

# https://www.conceptispuzzles.com/index.aspx?uri=puzzle/sudoku/techniques

def sudoku_reader(filename_as_string,number):
    sudoku_text = open(filename_as_string, "r")
    lines = sudoku_text.readlines()
    sudoku = np.empty((9, 9), dtype=int)
    for i in range(9):
        for j in range(9):
            sudoku[i, j] = lines[i+(number-1)*10][j]
    return sudoku

def test_for_errors(ss):
    if 0 in ss and np.count_nonzero(sw) == 0:
        print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
        print("There are no options for some missing values in Sudoku")
        print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
        return 1
    for val in range(1,10):
        for i in range(9):
            if np.count_nonzero(ss[i,:]==val) > 1:
                print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                print("row {} has more than one of a value {}".format(i+1, val))
                print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                return 1
                
            elif np.count_nonzero(ss[:,i]==val) > 1:
                print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                print("column {} has more than one of a value {}".format(i+1, val))
                print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                return 1
        for i in range(0,9,3):
            for j in range(0,9,3):
                if np.count_nonzero(ss[i:i+3,j:j+3]==val) > 1:
                    print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                    print("3x3 square has more than 1 of a value")
                    print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                    return 1
    return 0

def print_s(array):
    print("")
    for i in range(9):
        if i % 3 == 0 and i != 0:
            for j in range(9):
                if j % 3 == 0 and j != 0:
                    print("|", end=" ")
                print("{:^12}".format("-------"), end=" ")
                if j == 8:
                    print(" ")
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")
            print("{:^12}".format(str(array[i, j]).replace(" ", "").replace("0", " ")), end=" ")
            if j == 8:
                print(" ")

def print_m(solution, options):
    for i in range(9):
        if i % 3 == 0 and i != 0:
            for j in range(9):
                if j % 3 == 0 and j != 0:
                    print("|", end=" ")
                print("{:^12}".format("-------"), end=" ")
                if j == 8:
                    print("")
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")
            if solution[i,j] == 0:
                print("{:^12}".format(str(options[i, j]).replace("0", " ").replace(" ", "")), end=" ")
            else:
                print("{:^12}".format(">  "+str(solution[i, j]).replace(" ", "").replace("0", " ")+"  <"), end=" ")
            if j == 8:
                print("")

def update_options(row, col, val):
    sw[row, :, val - 1] = np.zeros(9)
    sw[:, col, val - 1] = np.zeros(9)
    row3x3 = row // 3 * 3
    col3x3 = col // 3 * 3
    sw[row3x3:row3x3 + 3, col3x3:col3x3 + 3, val - 1] = np.zeros((3, 3))
    sw[row,col,:] = np.zeros(9)

def only_one_option():
    changes = 0
    for i in range(9):
        for j in range(9):
            if np.count_nonzero(sw[i, j, :]) == 1:
                val = np.sum(sw[i, j, :])
                ss[i, j] = val
                print("Solved sudoku with value: ", val, "  at row", i+1, "column", j+1, "    only option in cell")
                update_options(i, j, val)
                changes += 1
    return changes

def only_place_left_in_row_or_col():
    changes = 0
    for i in range(9):
        for val in range(1,10):
            if np.count_nonzero(sw[i, :, val - 1] == val) == 1:
                [[i_r]] = np.argwhere(sw[i, :, val - 1] == val)
                ss[i, i_r] = val
                print("Solved sudoku with value: ", val, "  at row", i+1, "column", i_r+1, "    only place left in row")
                update_options(i, i_r, val)
                changes += 1
            if np.count_nonzero(sw[:, i, val - 1] == val) == 1:
                [[i_r]] = np.argwhere(sw[:, i, val - 1] == val)
                ss[i_r, i] = val
                print("Solved sudoku with value: ", val, "  at row", i_r+1, "column", i+1, "    only place left in column")
                update_options(i_r, i, val)
                changes += 1
    return changes

def only_place_left_in_square():
    changes = 0
    for i in range(0,9,3):
        for j in range(0,9,3):
            for val in range(1,10):
                if np.count_nonzero(sw[i:i+3, j:j+3, val - 1] == val) == 1:
                    [[i_s, j_s]] = np.argwhere(sw[i:i+3, j:j+3, val - 1] == val)
                    ss[i+i_s,j+j_s] = val
                    print("Solved sudoku with value: ", val, "  at row", i+i_s+1, "column", j+j_s+1, "    only place left in square")
                    update_options(i+i_s,j+j_s, val)
                    changes += 1
    return changes

def narrow_down_options():
    changes = 0
    for val in range(1,10):
        for i3 in range(0,9,3):
            for i1 in range(3):
                for j3 in range(0,9,3):
                    for j1 in range(3):
                        if val in sw[i3+i1,:,val-1] \
                        and val in sw[i3+i1,j3:j3+3,val-1] \
                        and np.count_nonzero(sw[i3+i1,j3:j3+3,val-1]) == np.count_nonzero(sw[i3:i3+3,j3:j3+3,val-1])\
                        and np.count_nonzero(sw[i3+i1,j3:j3+3,val-1]) < np.count_nonzero(sw[i3+i1,:,val-1]):
                            changes += 1
                            print("Options for value  ", val, "  in row  ", i3+i1+1, "  narrowed down to columns  ", j3+1, "through", j3+3)
                            if j3 == 0:
                                sw[i3+i1, j3+3:, val-1] = np.zeros(6)
                            elif j3 == 3: 
                                sw[i3+i1, :j3, val-1] = np.zeros(3)
                                sw[i3+i1, j3+3:, val-1] = np.zeros(3)
                            else:
                                sw[i3+i1, :j3, val-1] = np.zeros(6)
                        
                        if val in sw[:,j3+j1,val-1] \
                        and val in sw[i3:i3+3,j3+j1,val-1] \
                        and np.count_nonzero(sw[i3:i3+3,j3+j1,val-1]) == np.count_nonzero(sw[i3:i3+3,j3:j3+3,val-1])\
                        and np.count_nonzero(sw[i3:i3+3,j3+j1,val-1]) < np.count_nonzero(sw[:,j3+j1,val-1]):
                            changes += 1
                            print("Options for value  ", val, "  in column  ", j3+j1+1, "  narrowed down to rows  ", i3+1, "through", i3+3)
                            if i3 == 0:
                                sw[i3+3:, j3+j1, val-1] = np.zeros(6)
                            elif i3 == 3: 
                                sw[:i3, j3+j1, val-1] = np.zeros(3)
                                sw[i3+3:, j3+j1, val-1] = np.zeros(3)
                            else:
                                sw[:i3, j3+j1, val-1] = np.zeros(6)
    return changes


################################################################   MAIN 

sudoku = sudoku_reader("many_sudokus.txt",3)
ss = np.copy(sudoku)
sw = np.zeros((9, 9, 9), dtype=int)

for i in range(9):
    for j in range(9):
        if ss[i, j] == 0:
            sw[i, j] = list(range(1, 10))

################################################################ INIT
print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\nLet's see the puzzle..:")
for i in range(9):
    for j in range(9):
        if ss[i, j] != 0:
            update_options(i, j, ss[i, j])
print("The options in the unsolved squares are listed in brackets. I removed the options that are already ruled out")
print_m(ss,sw)
print("\nLet's start solving")

################################################################ LOOP
keep_going = True
error = 0
test_number = 0
# test_cell_last = 0
test_cell_used = []
cycle = 0
breakmode = ""
backup = {}
# while keep_going:
test_matrix = np.zeros((9,9))







for _ in range(7):
    cycle += 1
    print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n \nRun Number. ", cycle)
    
    still_changing = True
    sol_run = 0
    while still_changing:
        sol_run += 1
        print("Solution Cycle: ", sol_run)
        changes = 0
        changes += only_one_option()
        changes += only_place_left_in_row_or_col()
        changes += only_place_left_in_square()
        if changes == 0:
            changes += narrow_down_options()
        if changes == 0:
            still_changing = False
    
    error = 0 + test_for_errors(ss)
    print("error: ", error)
    
    if error > 0:
        print("--------------------------------------------------------------------------------------------------ERROR")
        print(backup.keys())
        print("test number: ", test_number)
        print("--------------------------------------------------------------------------------------------------ERROR")
        print_m(ss,sw)
        print("")
        # restore values:

        if backup["high_option{}".format(test_number)] == 1: #if highest option was the current. revert to solution and try low option
            backup["high_option{}".format(test_number)] = 0  #set
            ss = np.copy(backup["ss{}".format(test_number)])
            sw = np.copy(backup["sw{}".format(test_number)])
            [i,j] = np.copy(backup["cell{}".format(test_number)])
            val = np.copy(backup["val{}".format(test_number)])
            sw[i,j,val-1] = 0
            print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
            print("That did not go well. ")
            print("Option  ", val, "   at row  ", i+1, "  column  ", j+1, "    is removed from options")
            print("test number: ", test_number)
            print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
            print(backup["high_option{}".format(test_number)])
            # flipped_to_low_option = 1
        elif backup["high_option{}".format(test_number)] == 0:
            if test_number > 0:
                test_number -= 1
            ss = np.copy(backup["ss{}".format(test_number)])
            sw = np.copy(backup["sw{}".format(test_number)])
            [i,j] = np.copy(backup["cell{}".format(test_number)])
            val = np.copy(backup["val{}".format(test_number)])
            # back_to_previous_test = 1
            
            print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
            print("That did not go well either ")
            print("The other value at row  ", i+1, "  column  ", j+1, "didnt progress the puzzle either")
            print("test number: ", test_number)
            print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
            
                
        # elif backup["high_option{}".format(test_number)] == 0:  #if lower option was the current. r
        print_m(ss,sw)
        # print(i,j,val)
        # keep_going= False
        print(backup.keys())
        print("high option : ",test_number,"  : ", backup["high_option1".format(test_number)])
        print("test number: ", test_number)
        
    elif 0 not in ss and error == 0:
        breakmode = "solved"
        break
    
    elif error == 0:
        print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
        print("Nothing more cells could be solved. We will start testing")
        print("Let's see what we're working with")
        print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
        print_m(ss,sw)
        done_change = False
        test_number += 1
        for i in range(9):
            for j in range(9):
                if np.count_nonzero(sw[i,j,:]) == 2:   # find cell with only two options
                    if test_matrix[i,j] == 0: # check if tested before
                        test_matrix[i,j] = 1
                        val=np.argmax(sw[i,j,:], axis=0)+1
                        backup["ss{}".format(test_number)] = np.copy(ss)
                        backup["sw{}".format(test_number)] = np.copy(sw)
                        backup["cell{}".format(test_number)] = [i,j]
                        backup["val{}".format(test_number)] = val
                        backup["high_option{}".format(test_number)] = 1
                        ss[i,j] = val
                        update_options(i,j,val)
                        
                        print("\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")
                        print("TESTING: There are two options at row  ", i+1, "  column  ", j+1,"    we will test the value  ", val)
                        print("test number: ", test_number)
                        print("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n")
                        
                        done_change = 1
                        
                        break
                if done_change == True: break
            if done_change == True: break
    
print_m(ss,sw)
if breakmode == "solved":
    print_m(ss,sw)
    print("\nYay. I think I have solved the puzzle!!!")
if breakmode == "failed":
    print_m(ss,sw)
    print("\nBuuuuuuuuhhh.. Cannot make progress.     \nNeed more brains")

print("Number of runs", cycle)
# for opt in range(1,test_number+1):
#     print("high option : ", opt, backup["high_option{}".format(opt)])
